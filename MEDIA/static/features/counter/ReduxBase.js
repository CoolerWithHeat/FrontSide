import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchCount } from './counterAPI';
import { CustomCounter } from '../../components';
import { GetCartProducts } from '../../components';


export const CustomCounterBase = createSlice({
    
    name: 'PersonalCustomCounter',

    initialState: {
        
        CurrentValue: 0,
    
    },

    // The `reducers` field lets us define reducers and generate associated actions

    reducers: {

      AddOne: (state) => {

        // Redux Toolkit allows us to write "mutating" logic in reducers. It
        // doesn't actually mutate the state because it uses the Immer library,
        // which detects changes to a "draft state" and produces a brand new
        // immutable state based off those changes

        state.CurrentValue += 1;

      },

      SubtractOne: (state) => {

        state.CurrentValue -= 1;

      },

      Add_Or_ByFixedAmount: (state, Amount) => {

        if (Amount.payload[1]){
            state.CurrentValue += Amount.payload[0]
        }
        else{
            state.CurrentValue -= Amount.payload[0]
        }
      
    } 

      // Use the PayloadAction type to declare the contents of `action.payload`
     // incrementByAmount: (state, action) => {
     //   state.value += action.payload;
     // },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
  });




export const FetchedProductsBase = createSlice({

    name: 'Fetched_Products',

    initialState: {
        
        RawProducts: [],

    },

    reducers: {

        UpdateProducts: (state, action) => {

            if (action.payload[0]){

                const PreparedAction = [...action.payload]
                state.RawProducts = PreparedAction
                
            }

            else{

                const PreparedAction = [...state.RawProducts, action.payload]
                state.RawProducts = PreparedAction

            }
            
        }

    }
})




export const AnimatedButtonStates = createSlice({

    name: 'AnimatedButtonStateManagement',

    initialState: {
        
        TriggerClassName:[false, ""],
        CurrentButtonText: 'Add To Card',

    },

    reducers: {

        UpdateButtonState: (state, StateRequest) => {

            var DefaultState = {
                TriggerClassName:[false, ""],
                CurrentButtonText: 'Add To Card',
            }

            const StateIndexes = {

                false: null,
                true : "fa fa-spinner fa-spin",

            };

            const StatusText = {

                LoadingButtonText: "Adding",
                SuccessButtonText: "Done!",

            }

            var ButtonText;
            const RequestedStatus = !state.TriggerClassName[0]
            const PreparedData = [RequestedStatus, StateIndexes[RequestedStatus]];  

            switch(StateRequest.payload){
                case "process":
                    ButtonText = StatusText['LoadingButtonText'];
                    state.CurrentButtonText = ButtonText;
                    state.TriggerClassName = PreparedData;
                    break
                case "success":
                    ButtonText = StatusText['SuccessButtonText'];
                    state.CurrentButtonText = ButtonText;
                    state.TriggerClassName = PreparedData;
                    break
                case "reset":   
                    state.TriggerClassName = DefaultState['TriggerClassName'];
                    state.CurrentButtonText = DefaultState['CurrentButtonText'];
                    break

                default:
                    state.TriggerClassName = PreparedData;
                    state.CurrentButtonText = ButtonText;
                    break
            }
        }

    }
})

export const SideBarButtonsState = createSlice({

    name: 'SidebarButtonsCurrentState',

    initialState: {
        BtnID: 1,
    },

    reducers: {

        UpdateButtonState: (state, StateRequest) => {

            state.BtnID = StateRequest.payload

        }

    }
})


export const CartProducts = createSlice({

    name: 'Cart',

    initialState: {
        Products: [],
        TrashIcon: '',
        BottomLine: 0,
    },

    reducers: {

        UpdateButtonState: (state, BackendResponse) => {

            state.Products = [...   BackendResponse.payload.ClonedProduct];
            state.TrashIcon = '/' + BackendResponse.payload.TrashIcon;
            state.BottomLine = BackendResponse.payload.BottomLine;

        },


    }
})



export const ProductsBase = createSlice({

    name: 'ClientProducts',

    initialState: {
        Products: [],
    },

    reducers: {

        StoreProducts: (state, BackendResponse) => {

            state.Products = [...BackendResponse.payload]
            // state.Products = [...   BackendResponse.payload.ClonedProduct];
            // state.TrashIcon = BackendResponse.payload.TrashIcon;
            // state.BottomLine = BackendResponse.payload.BottomLine;

        },

    }
})


export const ResultProductsBase = createSlice({

    name: 'SearchResultProducts',

    initialState: {
        Products: [],
        Searched: false,
    },

    reducers: {

        StoreProducts: (state, BackendResponse) => {

            state.Products = [...BackendResponse.payload]

        },

        StatusUpdate: (state, Status) => {

            state.Searched = Status.payload


        },

    }
})